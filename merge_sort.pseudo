function merge_sort(array)
  if array.length <= 1
    return array
  
  mid_value = array / 2
  left_half = array[0..mid_value]
  right_half = array[mid_value..-1]

  return merge(left_half, right_half)

function merge(left_half, right_half)
  result = []
  inversion_count = 0
  while left_half && right_half
    if left_half[0] <= right_half[0]
      result.append(left_half.pop())
    else
      inversion_count =+ 1
      result.append(right_half.pop())

  result =+ left_half
  result =+ right_half

  return result


function merge_sort_inversion(array)
  if array.length <= 1
    return [array, 0]
  
  mid = array.length / 2
  left_half = array[0..mid]
  right_half = array[mid..array.length-1]

  left, left_inversion = merge_sort_inversion(left_half)
  right, right_inversion = merge_sort_inversion(right_half)

  merge, merge_inversion_count = merge_inversion(left, right)
  return [merge, merge_inversion_count + left_inversion + right_inversion]

function merge_inversion(left, right)
  merged_result = []
  inversion_count = 0

  while left && right
    if left[0] <= right[0]
      merged_result.append(left.pop())
    else
      inversion_count += left.length
      merged_result.append(right.pop())
  
  return [merged_result, inversion_count]
