
Define Node
  // attributes
  data
  left
  right
  height

  // constructor
  Function Node(data, height)
    data = data
    height = height
    left = null
    right = null

Define AVLTree
  // attributes
  root

  Function AVLTree(data)
    root = new Node(data, 0)

  Function insert(data)
    root = insert_node(root, data)

  function insert_node(node, data)
    if node == null
      return new Node(data)

    if data > node.data
      node.right = insert_node(node.right, data)
    else
      node.left = insert_node(node.left, data)

    // update node's height
    node.height = 1 + max(height(node.left), height(node.right))

    // get the balance
    balance = height(node.left) - height(node.right)

    // right rotation
    if balance > 1 and data < node.left.data
      return right_rotate(node)

    // left rotation
    if balance < -1 and data > node.right.data
      return left_rotate(node)

    // left-right rotation
    if balance > 1 and data > node.left.data
      node.left = left_rotate(node.left)
      return right_rotate(node)

    // right-left rotation
    if balance < -1 and data < node.right.data
      node.right = right_rotate(node)
      return left_rotate(node)

    return node

  function height(node)
    if node is null
      return 0

    return node.height

  function left_rotate(node)

  function right_rotate(node)

