
Define Node
  // attributes
  data
  left
  right
  height

  // constructor
  Function Node(data, height)
    data = data
    height = height
    left = null
    right = null

Define AVLTree
  // attributes
  root

  Function AVLTree(data)
    root = new Node(data, 0)

  Function insert(data)
    root = insert_node(root, data)

  Function delete(data)
    root = delete_node(root, data)

  function insert_node(node, data)
    if node == null
      return new Node(data)

    if data > node.data
      node.right = insert_node(node.right, data)
    else
      node.left = insert_node(node.left, data)

    // update node's height
    node.height = 1 + max(height(node.left), height(node.right))

    // get the balance
    balance = height(node.left) - height(node.right)

    // right rotation
    if balance > 1 and data < node.left.data
      return right_rotate(node)

    // left rotation
    if balance < -1 and data > node.right.data
      return left_rotate(node)

    // left-right rotation
    if balance > 1 and data > node.left.data
      node.left = left_rotate(node.left)
      return right_rotate(node)

    // right-left rotation
    if balance < -1 and data < node.right.data
      node.right = right_rotate(node)
      return left_rotate(node)

    return node

  function delete_node(node, data)
    if node is null
      return null

    // Step 1 BST deletion
    if value < node.value
      node.left = delete_node(node.left, value)
    else if value > node.value
      node.right = delete_node(node.right, value)
    else
      // Node to be deleted found
      if node.left is null or node.right is null
          temp = node.left ? node.left  node.right
          if temp is null
              node = null
          else
              node = temp
      else
          successor = get_min(node.right)
          node.value = successor.value
          node.right = delete_node(node.right, successor.value)

    // If only one node
    if node is null
      return node

    // Step 2 Update height
    node.height = 1 + max(height(node.left), height(node.right))

    // Step 3 Get balance
    balance = height(node.left) - height(node.right)

    // Step 4 Balance the tree

    // Left Left Case
    if balance > 1 and get_balance(node.left) >= 0
      return right_rotate(node)

    // Left Right Case
    if balance > 1 and get_balance(node.left) < 0
      node.left = left_rotate(node.left)
      return right_rotate(node)

    // Right Right Case
    if balance < -1 and get_balance(node.right) <= 0
      return left_rotate(node)

    // Right Left Case
    if balance < -1 and get_balance(node.right) > 0
      node.right = right_rotate(node.right)
      return left_rotate(node)

    return node

  function height(node)
    if node is null
      return 0

    return node.height

  function left_rotate(node)
    right_subtree_node = node.right
    temp_node = right_subtree_node.left

    right_subtree_node.left = node
    node.right = temp_node

    node.height = 1 + max(height(node.left), height(node.right))
    right_subtree_node.height = 1 + max(height(right_subtree_node.left), height(right_subtree_node.right))

    return right_subtree_node

  function right_rotate(node)
    left_subtree_node = node.left
    temp_node = left_subtree_node.right

    left_subtree_node.right = node
    node.left = temp_node

    node.height = 1 + max(height(node.left), height(node.right))
    left_subtree_node.height = 1 + max(height(left_subtree_node.left), height(left_subtree_node.right))

    return left_subtree_node

  function get_min(node)
    while (node.left is not null) {
      node = node.left
    }

    return node

  function get_balance(node)
    if node is null
      return 0
    
    height(node.left) - height(node.right)

  

    

