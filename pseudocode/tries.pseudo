Define TrieNode:
  children
  is_end_of_word


  Function TrieNode()
    children = {}
    is_end_of_word = false

  Function insert(root, word)
    node = root
    for each character in the word
      if character is not in the node.children
        node.children[character] = new TrieNode()
      node = node.children[character]
    node.is_end_of_word = true

  Function search(root, word)
    node = root
    for each character in the word
      if character is not in the node.children
        return false
      node = node.children

    return node.is_end_of_word

  Function words_start_with(root, word)
    if (node or word is null)
      return

    node = root

    if(first character in the word is found in the trie)
      words_start_with(node.children[character], remaining_characters)
    else
      return false

  Function words_in_the_trie(node, words)
    children_chars = node.children.keys
    word set to ''
    for char in children_chars
      current_node = node.children[char]
      if current_node is not is_end_of_word
        add char to the word
      else
        add char to word
        add word to words
        word is set to ''

    return words
