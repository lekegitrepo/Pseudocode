
class Node
  attributes :value, :next

  constructor(value, next = null)
    @value = value
    @next = next

class LinkedList
  attributes :head

  constructor(head)
    @head = head

  function append(value)
    new_node = Node.constructor(value)

    if head == null
      @head = new_node
      current_node = @head
    else
      while current_node.next
        current_node = current_node.next


  function delete(value)
    if @head.value == value
      @head = @head.next
      return
    else
      current_node = @head
      while current_node.next and current_node.next.value and current_node.next.value != value
        current_node = current_node.next
      
    current_node = current_node.next.next if current_node.next


  function traverse_linked_list
    if @head == null
      return
    
    current_node = @head
    while current_node
      p `${current_node.value}`
      current_node = current_node.next

    p 'null' if @head == null

  function insert(value)
    if value is found in the linked_list.find(value)
      return 'Value already exist in the linked_list'

    current_node = @head
    new_node = Node.constructor(value)

    while current_node and current_node.value < value
      current_node = current_node.next
      
      new_node.next = current_node.next
      current_node.next = new_node

  function find(value)