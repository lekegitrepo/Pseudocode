
function create_map()
  return {}

function add_edge(graph, x, y, directed = false)
  if graph is null
    graph = create_map()

  if x is not in graph[x]
    graph[x] = []
  
  if y is not in graph[y]
    graph[y] = []

  if graph[x] does not include y
    graph[x].append(y)

  if directed is false and graph[y] does not include x
    graph[y].append(x)

  return graph

function print_graph(graph)
  if graph is empty
    return 'Graph is empty'

  for node in graph
    print "${node} -> ${graph[node].join(', ')}"

function bfs_traversal(graph, start)
  create empty queue
  create visited Set
  enqueue(start)
  add start to visited

  while queue is not empty
    current_node = dequeue()
    process(current_node)

    for neighbor in graph[current_node]
      if neighbor is not visited
        enqueue(neighbor)
        add neighbor to visited

  return visited

function dfs_traversal(graph, node, visited)
  if node is in visited
    return

  process(node)
  add node to visited

  for each neighbor in graph[node]
    dfs_traversal(graph, neighbor, visited)
