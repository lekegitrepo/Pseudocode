Define Heap:
  array

  function parent_index(i)
    return (i - 1) / 2 // floor

  function left_child_index(i)
    return (2 * i) + 1

  function right_child_index(i)
    return (2 * i) + 2

  function swap(heap, parent, index)
    temp = heap[parent]
    heap[parent] = heap[index]
    heap[index] = temp

  Function min_heap_insert(heap, value)
    heap.append(value)
    index = heap.length

    while index > 0
      parent = parent_index(index)
      if heap[parent] > heap[index]
        swap(heap, parent, index) // heap[parent] and heap[index]
        index = parent
      else
        break
      
    return heap

  Function max_heap_insert(heap, value)
    heap.append(value)
    index = heap.length

    while index > 0
      parent = parent_index(index)
      if heap[parent] < heap[index]
        swap(heap, parent, index)
        index = parent
      else
        break
      
    return heap
